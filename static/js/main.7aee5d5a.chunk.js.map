{"version":3,"sources":["components/SudokuCell.js","services/sudoku.js","components/SudokuGrid.js","components/SudokuError.js","components/SudokuSolver.js","App.js","serviceWorker.js","index.js"],"names":["SudokuCell","value","valid","onChange","style","width","paddingLeft","height","textAlign","fontSize","color","type","min","max","maxLength","String","event","target","validate","cells","length","i","j","isValid","isFilled","solveUtil","getUnFilledCell","possibleValues","row","column","usedValues","Set","add","Math","floor","has","push","getPossibleValues","x","solution","map","rowi","cell","coli","isSolved","SudokuGrid","borderStyle","border","margin","rowIndex","key","columnIndex","newValue","SudokuError","error","onClose","Dialog","open","trim","DialogContent","DialogActions","Button","autoFocus","onClick","SudokuSolver","state","Array","_","loading","solve","bind","clear","handleChange","slice","Number","this","setState","prevState","Container","maxWidth","Grid","container","spacing","direction","justify","item","xs","Box","Typography","variant","align","marginTop","mx","size","marginRight","marginLeft","Backdrop","zIndex","CircularProgress","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7aee5d5a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\n/**\n * Display a single sudoku cell\n * \n * @property number value\n * @property bool valid\n * @property function onChange\n */\nconst SudokuCell = ({ value, valid, onChange }) => (\n    <input\n        style={{ \n            width: \"1.8em\",\n            paddingLeft: \"0.2em\", \n            height: \"1.4em\", \n            textAlign: \"center\", \n            fontSize: \"1.3em\", \n            color: ((valid)? \"rgba(0, 0, 0, 0.54)\" :\"red\"), \n            \n        }}\n        type=\"number\"\n        min=\"0\"\n        max=\"9\"\n        maxLength=\"1\"\n        value={String(value)}\n        onChange={event => onChange(event.target.value)}\n    />\n);\n\n/**\n * Prop types validation\n */\nSudokuCell.propTypes = {\n    value: PropTypes.number.isRequired,\n    valid: PropTypes.bool.isRequired,\n    onChange: PropTypes.func.isRequired\n};\n\nexport default SudokuCell;","/**\n * Checks if a 2d array is a valid 9x9 sudoku grid\n * \n * @param number[9][9] cells - 9x9 sudoku grid \n * @returns bool - true if cells is valid\n */\nfunction validate(cells) {\n    // verify 2d array sizes\n    if (cells.length !== 9)\n        return false;\n    for (let i in cells) {\n        let row = cells[i];\n        if (row.length !== 9)\n            return null;\n    }\n    \n    // Check if each cell is valid and not duplicate\n    for (let i = 0; i < 9; i++)\n        for (let j = 0; j < 9; j++)\n            if (!isValid(cells, i, j))\n                return false;\n    \n    return true;\n}\n\n/**\n * Check if all the cells in a 2d array are filled\n * \n * @param number[9][9] cells - 9x9 sudoku grid\n * @returns bool - true if all cells are filled\n */\nfunction isFilled(cells) {\n    for (let i = 0; i < 9; i++)\n        for (let j = 0; j < 9; j++)\n            if (cells[i][j] === 0) return false;\n\n    return true;\n}\n\n\n/**\n * Get an unfilled cell from the sudoku grid\n * \n * @param number[9][9] cells - 9x9 sudoku grid\n * @returns [nnumber, number] - array indices of the next unfilled cell\n */\nfunction getUnFilledCell(cells) {\n    for (let i = 0; i < 9; i++)\n        for (let j = 0; j < 9; j++)\n            if (cells[i][j] === 0) \n                return [i, j];\n\n    return null;\n}\n\n/**\n * Get possible values for a cell in sudoku grid\n * \n * @param number[][] cells - 9x9 sudoku grid\n * @param number row\n * @param number column \n * @requires number[] - list of possible values\n */\nfunction getPossibleValues(cells, row, column) {\n    // find values already used in row, column or box\n    let usedValues = new Set([]);\n    for (let i = 0; i < 9; i++) {\n        usedValues.add(cells[i][column]);\n        usedValues.add(cells[row][i]);\n    }\n    for (let i = Math.floor(row / 3 ) * 3; i < Math.floor(row / 3) * 3 + 3; i++) {\n        for (let j =Math.floor(column / 3) * 3; j < Math.floor(column / 3) * 3 + 3; j++) {\n            usedValues.add(cells[i][j])\n        }\n    }\n\n    // find unused values\n    let possibleValues = [];\n    for (let i=0; i<10;i++) {\n        if (!usedValues.has(i)) possibleValues.push(i);\n    }\n\n    return possibleValues;\n}\n\n/**\n * Recursively solves a sudoku grid\n * \n * @param number[][] cells - 9x9 sudoku grid\n * @returns number[][] - solved 9x9 sudoku grid or null\n */\nfunction solveUtil(cells) {\n    // if the cells are filled completely stop.\n    if (isFilled(cells)) \n        return cells;\n\n    // Find the next unfilled cell and possible values\n    let [i, j] = getUnFilledCell(cells);\n    let possibleValues = getPossibleValues(cells, i, j);\n    \n    // if there are no possible values then the sudoku cant be solved\n    if (possibleValues.length === 0) \n        return null;\n    \n    // try to solve the remaining cells for each of the possible values\n    for (let x in possibleValues) {\n        let newCells = cells.map((row, rowi) => (\n            row.map((cell, coli) => (\n                (rowi === i && coli === j)? possibleValues[x]: cell\n            ))\n        ));\n\n        let solution = solveUtil(newCells);\n        \n        // if solved then return the soultion\n        if (solution !== null)\n            return solution;\n    }\n\n    return null;\n}\n\n/**\n * Checks if the value in a cell is valid\n * \n * @param number[][] cells - 9x9 sudoku grid \n * @param number row \n * @param number column \n * @returns bool - true if the value in the cell is valid\n */\nexport function isValid (cells, row, column) {    \n    // unfilled cells are treated as valid\n    if (cells[row][column] === 0) \n        return true;\n\n    // Check for duplicate in row and column\n    for (let i = 0; i < 9; i++) {\n        if (i !== row && cells[i][column] === cells[row][column]) return false;\n        if (i !== column && cells[row][i] === cells[row][column]) return false;\n    }\n\n    // Check for duplicate in 3x3 grid\n    for (let i = Math.floor(row / 3 ) * 3; i < Math.floor(row / 3) * 3 + 3; i++) {\n        for (let j =Math.floor(column / 3) * 3; j < Math.floor(column / 3) * 3 + 3; j++) {\n            if (i === row || j === column) continue;\n            if (cells[i][j] === cells[row][column]) return false;\n        }\n    }\n\n    return true;\n}\n\n/**\n * Check if a sudoku grid is solved\n * \n * @param number[][] cells - 9x9 sudoku grid \n */\nexport function isSolved(cells) {\n    return isFilled(cells) && validate(cells);\n}\n\n/**\n * Utility function to solve a sudoku\n * \n * @param number[][] cells - 9x9 sudoku grid \n * @return number[][] - solved sudoku or null if unable to solve\n */\nexport function solve(cells) {\n    if (!validate(cells)) \n        return null;\n\n    return solveUtil(cells);\n}","import React from 'react';\nimport SudokuCell from './SudokuCell';\nimport { isValid, isSolved } from '../services/sudoku';\nimport PropTypes from 'prop-types';\n\n/**\n * Display the sudoku grid\n * \n * @property number[][] cells - 9x9 sudoku grid\n */\nconst SudokuGrid = ({ cells, onChange }) => {\n    const borderStyle = { border: ((isSolved(cells))? \"1px solid limegreen\": \"1px solid black\") };\n\n    return (\n        <table style={{ ...borderStyle, margin: \"0.3em\" }}>\n            <tbody>{cells.map((row, rowIndex) => (\n                <tr style={{ ...borderStyle }} key={rowIndex}>{row.map((cell, columnIndex) => (\n                    <td style={{ ...borderStyle }} key={columnIndex}>\n                        <SudokuCell \n                            value={cell} \n                            onChange={newValue => onChange(newValue, rowIndex, columnIndex)} \n                            valid={isValid(cells, rowIndex, columnIndex)}\n                        />\n                    </td>\n                ))}</tr>\n            ))}</tbody>\n        </table>\n    );\n};\n\n/**\n * Prop types validation\n */\nSudokuGrid.propTypes = {\n    cells: PropTypes.arrayOf(PropTypes.arrayOf(PropTypes.number)).isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default SudokuGrid;","import React from 'react';\nimport { Dialog, DialogContent, DialogActions, Button } from '@material-ui/core';\nimport PropTypes from 'prop-types';\n\n/**\n * Show a dialog box if ther is any error\n * \n * @property string - error message to display or null \n */\nconst SudokuError = ({ error, onClose }) => (\n    <Dialog \n        open={error.trim() !== \"\"} \n        onClose={onClose}\n    >\n        <DialogContent>\n            {error}\n        </DialogContent>\n        <DialogActions>\n            <Button \n                color=\"primary\" \n                autoFocus \n                onClick={onClose}\n            > \n                OK\n            </Button>\n        </DialogActions>\n    </Dialog>\n);\n\n/**\n * Proptypes validations\n */\nSudokuError.propTypes = {\n    error: PropTypes.string.isRequired,\n    onClose: PropTypes.func.isRequired\n}\n\nexport default SudokuError;","import React from 'react';\nimport SudokuGrid from './SudokuGrid';\nimport SudokuError from './SudokuError';\nimport { solve } from '../services/sudoku';\nimport { Button, Grid, Box, Typography, Container, Backdrop } from '@material-ui/core';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n/**\n * Sudoku solver \n */\nclass SudokuSolver extends React.Component {\n    constructor() {\n        super();\n\n        this.state = { \n            cells: [...Array(9)].map(_ => [...Array(9)].map(_ => 0)),\n            error: \"\",\n            loading: false\n        };\n        \n        this.solve = this.solve.bind(this);\n        this.clear = this.clear.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n\n    }\n\n    /**\n     * Validates and change a cell value\n     * \n     * @param number newValue \n     * @param number rowIndex \n     * @param number columnIndex \n     */\n    handleChange(newValue, rowIndex, columnIndex) {\n        // if multiple keys are pressed take the last character\n        if (newValue.length !== 1)\n            newValue = newValue.slice(newValue.length - 1);\n\n        // if new value is invalid, set value to zero\n        if (newValue === '' || newValue > 9 || newValue < 0)\n            newValue = 0;\n        \n        newValue = Number(newValue);\n\n        // update new value in state\n        this.setState(prevState => ({\n            cells: prevState.cells.map((row, i) => (\n                row.map((cell, j) => (\n                    (rowIndex === i && columnIndex === j)?\n                        newValue: \n                        cell\n                ))\n            ))\n        }));\n    }\n\n    /**\n     * Solve the sudoku\n     */\n    solve() {\n        this.setState({ loading: true });\n        let solution = solve(this.state.cells);\n        if (solution === null)\n            return this.setState({ error: 'Unable to solve!', loading: false });\n        else\n            return this.setState({ cells: solution, error: \"\", loading: false });\n    }\n\n    /**\n     * Reset the sudoku grid values to zero\n     */\n    clear() {\n        this.setState({\n            cells: [...Array(9)].map(_ => [...Array(9)].map(_ => 0)),\n            error: \"\",\n        });\n    }\n\n    render() {\n        return (\n            <Container maxWidth=\"sm\">\n                <Grid container spacing={1} direction=\"column\" justify=\"center\">\n                    <Grid item xs>\n                        <Box>\n                            <Typography variant=\"h4\" align=\"center\" color=\"textSecondary\"> \n                                SUDOKU\n                            </Typography>\n                        </Box>\n                    </Grid>\n                    <Grid item xs  style={{ marginTop: \"1em\" }}>\n                        <Box>\n                            <Typography align=\"center\" color=\"textSecondary\"> \n                                Fill the known cells and let the app solve the rest for you :)\n                            </Typography>\n                        </Box>\n                    </Grid>\n                    <Grid item xs container justify=\"center\" style={{ marginTop: \"1.5em\" }}>\n                        <SudokuGrid \n                            cells={this.state.cells} \n                            onChange={this.handleChange}\n                        />\n                    </Grid>\n                    <Grid item xs container justify=\"center\">\n                        <Button \n                            mx={2} \n                            size=\"small\" \n                            variant=\"outlined\" \n                            color=\"default\" \n                            onClick={this.solve} \n                            style={{ marginRight: \"0.5em\"}}\n                        > \n                            Solve \n                        </Button>\n                        <Button \n                            mx={2} \n                            size=\"small\" \n                            variant=\"outlined\"  \n                            onClick={this.clear} \n                            style={{ marginLeft: \"0.5em\"}}\n                        >\n                            Clear\n                        </Button>\n                    </Grid>\n                </Grid>\n                <SudokuError \n                    error={this.state.error} \n                    onClose={() => this.setState({ error: \"\" })} \n                />\n                <Backdrop open={this.state.loading} style={{ zIndex: \"1000\" }}>\n                    <CircularProgress color=\"inherit\" />\n                </Backdrop>\n            </Container>\n        );\n    }\n}\n\nexport default SudokuSolver;","import React from 'react';\nimport SudokuSolver from './components/SudokuSolver';\n\nfunction App() {\n  return (\n    <SudokuSolver />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}